{
  "hash": "5c7859e0e48d5dacae6ccb68b3e3e7a8",
  "result": {
    "markdown": "---\ntitle: \"<span style='color:#FFC61A'> Introdução à Programação </span>\"\ntitle-slide-attributes: \n  data-background-image: images/matrix-class2.jpg\n  data-background-opacity: '0.75'\nsubtitle: \"<span style='color:#FFFFFF'> Aula 3 - Data Types & Operators </span>\"\nhighlight-style: github\nformat:\n  revealjs:\n    incremental: true\n    footer: \"<span style='color:#66023C'> Faculdade Belavista </span>\"\n    progress: true\n    menu: true\n    theme: simple\n    code-line-numbers: true\n    embed-resources: true\n---\n\n# [Strings (`str`)]{style=\"color:#85bae5\"}\n\n- Strings (`str`) are a type of data, encapsulated by quotes, supporting indexing, concatenation, and repetition.\n- `Strings` have methods like .split(), .upper(), .lower(), and .replace().\n- F-strings allow for dynamic string formatting with variable inclusion.\n- Integers (`int`) represent whole numbers and support basic mathematical operations.\n- Floats (`float`) represent real numbers with decimals, can be rounded, and compared with integers.\n- **Comparison operators** (==, !=, >, <, >=, <=) and **logical operators** (and, or, not) are used for evaluating conditions.\n- Comparisons result in boolean values (`True`, `False`).\n- **Variable coercion** involves converting one data type to another (str to int, int to str).\n- `Operators` are symbols or keywords that perform specific operations, like the assignment operator (=).\n\n---\n\n## `str` são encapsuladas por aspas\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-line-numbers=\"1,2|4,5|7,8,9,10\"}\n# Single\nmy_string1 = 'Hello, World!'\n\n## Double\nmy_string2 = \"Python é divertido.\"\n\n### Triple quotes\nmy_string3 = \"\"\"Esta é uma string\n        que abrange várias\n        linhas.\"\"\"\n```\n:::\n\n\n:::\n\n\n---\n\n## `str` suportam indexação\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Indexação = acessar partes de um todo\n- Indexação de strings em Python: `[ ]`\n- *Zero-based indexing*\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n## Criando nossa string\nnome_faculdade = 'Belavista'\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n## Indexando o elemento de posição zero\nnome_faculdade[0]\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'B'\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n## Indexando o elemento de posição 7\nnome_faculdade[6]\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n't'\n```\n:::\n:::\n\n\n:::\n\n---\n\n## `str` suportam concatenação e repetição\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Uso de operadores (realizam operações computacionais)\n- Símbolo adição `+`\n- Símbolo multiplicação `*`\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n## Criando uma str concatenada\nnome_faculdade = 'Faculdade' + ' ' + 'Belavista'\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n## Multiplicando uma string\n'Belavista' * 3\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'BelavistaBelavistaBelavista'\n```\n:::\n:::\n\n\n:::\n\n---\n\n## `str` possuem 'métodos'\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Funções que pertencem a um objeto\n- Tais funções são definidas como pertencentes a uma classe - e estão associadas a objetos dessa classe\n- Como chamar um método? Ponto `.`\n- Cada objeto possui métodos próprios\n  - Ações que podem ser realizadas em um objeto\n:::\n\n---\n\n## `str` possuem 'métodos'\n\n<div style=\"margin-top: 10px;\"></div>\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n## Criando nossa string\nnome_faculdade = 'Faculdade Belavista'\n## Acessando o método `split` de uma string\nnome_faculdade.split(' ')\n```\n:::\n\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['Faculdade', 'Belavista']\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n## Acessando o método `upper` de uma string\nnome_faculdade.upper()\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'FACULDADE BELAVISTA'\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n## Acessando o método `lower` de uma string\nnome_faculdade.lower()\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'faculdade belavista'\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n## Acessando o método `replace` de uma string\nnome_faculdade.replace('Faculdade', 'Universidade')\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Universidade Belavista'\n```\n:::\n:::\n\n\n:::\n\n---\n\n## `str` podem ser formatadas\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n- f-string method (*literal string interpolation*)\n- Maneira ágil de formatar strings (recente*)\n- Como? Prefixe `f` antes das aspas de uma `str`\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=18}\n``` {.python .cell-code code-line-numbers=\"1,2|4,5,6,7\"}\n## Criando uma variável\nnome_faculdade = 'Belavista'\n\n## Criando uma mensagem, utilizando o método f-string, que\n## inclui uma variável dentro da string\nmensagem = f'Seja bem-vindo à Faculdade {nome_faculdade}'\nprint(mensagem)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-stdout}\n```\nSeja bem-vindo à Faculdade Belavista\n```\n:::\n:::\n\n\n:::\n\n# [Integers (`int`)]{style=\"color:#85bae5\"}\n\n- Outro tipo de dado em Python\n- `int` = representam números inteiros (sem frações)\n- `int` são usadas não somenete em operações matemáticas\n\n\n## `int` suportam operações matemáticas\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n## Soma\n3 + 5\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n8\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n## Subtração\n100 - 10\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=23}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n90\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n## Multiplicação\n3 * 5\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n15\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n## Divisão\n15 / 3\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n5.0\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n## Exponenciação\n3 ** 5\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=29}\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n243\n```\n:::\n:::\n\n\n:::\n\n# [Floats (`int`)]{style=\"color:#85bae5\"}\n\n- Outro tipo de dado em Python\n- `float` = conjuntos dos números reais (com decimais)\n- `float` são muito comuns em cálculos científicos\n\n## `float` podem ser arredondadas\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=30}\n``` {.python .cell-code code-line-numbers=\"1,2,3|5,6,7\"}\n## Realizando um cálculo que resulte em uma float\nx = 10\ny = 3\n\n## Resultado\nz = x / y\nprint(z)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=31}\n\n::: {.cell-output .cell-output-stdout}\n```\n3.3333333333333335\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=32}\n``` {.python .cell-code code-line-numbers=\"1,2,3|8,9,10\"}\n## Realizando um cálculo que resulte em uma float\nx = 10\ny = 3\n\n## Resultado\nz = x / y\n\n## Arredondamento\nz1 = round(z, 2)\nprint(z1)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=33}\n\n::: {.cell-output .cell-output-stdout}\n```\n3.33\n```\n:::\n:::\n\n\n:::\n\n## `int` e `float` podem ser comparados!\n\n:::{.fragment}\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n## Criando variáveis numéricas\nx = 10\ny = 3/10\n\n## Comparando-as!\nx > y\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=35}\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n- `True` ?\n:::\n\n# [Operators]{style=\"color:#85bae5\"}\n\n- Realização de operações específicas (sem ser uma função)\n- Símbolos especiais\n- Palavras-chave\n- Já conhecemos um (o mais importante de todos)\n- Assignment Operator (`=`)\n\n## Comparison Operators\n\n:::{.fragment}\n- Igual: `==`\n- Diferente: `!=`\n- Maior que: `>`\n- Menor que: `<`\n- Maior ou igual a: `>=`\n- Menor ou igual a: `<=`\n:::\n\n## Comparison Operators\n\n:::{.fragment}\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n## Igual (==)\n10 == 10\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=37}\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n## Diferente (!=)\n10 != 3\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=39}\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n## Menor que (<)\n10 < 3\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nFalse\n```\n:::\n:::\n\n\n:::\n\n## Logic Operators\n\n:::{.fragment}\n- `and`: True se ambas verdadeiras\n- `or`: True se ao menos uma verdadeira\n- `not`: Inverte o valor booleano da expressão\n- Existem outros tipos de operadores (later)\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\n## and\n10 > 5 and 3 > 0\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=43}\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n## or\n10 == 5 or 3 != 2\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=45}\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\n## not\nnot(10 == 10)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=47}\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nFalse\n```\n:::\n:::\n\n\n:::\n\n## Comparisons result in `bool`!\n\n:::{.fragment}\n- Booleanos (`bool`)são outro tipo de dado!\n- O mais simples dos tipos, apenas: `True`, `False`\n- Relevant to know:\n  - `False` evaluate to `0`\n  - `True` evaluate to `1`\n  - Empty strings `\"\"` are coerced to `False`\n  - Every non-empty string are coerced to `True`\n:::\n\n# [Coercing variables]{style=\"color:#85bae5\"}\n\n- Se a variável `ano_nascimento` = `int`, então?\n- Coercing a `int` into `str`\n- Coercing a `str` into `int`\n- Coercing ('conversão') que sejam válidas!\n\n## Coercing an `int` into `str`\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n- Function to coerce numbers into string: `str`\n- Easy path: (quase) qualquer coisa pode ser uma string\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=48}\n``` {.python .cell-code code-line-numbers=\"1,2|4,5|7,8\"}\n## Criando uma variável numérica inteira (int)\nminha_int = 30\n\n## Coercing it so it becomes a 'str'\nnova_str = str(minha_int)\n\n## Proving that it became a str\nprint(f'Uma vez convertida, podemos apenas printar o numero {nova_str}!')\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=49}\n\n::: {.cell-output .cell-output-stdout}\n```\nUma vez convertida, podemos apenas printar o numero 30!\n```\n:::\n:::\n\n\n:::\n\n\n## Coercing an `str` into `int`\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n- Function to coerce a string into a number: `int`\n- Nós sabemos os símbolos que representam números\n- A máquina, nem sempre!\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=50}\n``` {.python .cell-code code-line-numbers=\"1,2,3|5,6|8,9\"}\n## Criando uma variável string (`str`)\nminha_str = '30'\n# Porque é uma string se eu sei que isso é o símbolo de um número?\n\n## Coercing it so it becomes a `int`\nnova_int = int(minha_str)\n\n## Proving that it became an `int`\n30 + nova_int\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=51}\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n60\n```\n:::\n:::\n\n\n:::\n\n## [Recap!]{style=\"color:#3e424b\"}{.scrollable}\n\n- **Strings** (`str`): Basic data type encapsulated by quotes, supporting indexing, concatenation, and methods.\n- **Indexing**: Accessing parts of strings using [ ], with zero-based indexing.\n- **Concatenation and Repetition:** Using + for joining strings and * for repeating strings.\n- **String Methods**: Functions like .split(), .upper(), .lower(), and .replace() to manipulate strings.\n- **Formatting Strings**: Using f-strings (f\"\") for embedding expressions within string literals.\n- Integers (`int`): Data type for whole numbers, supporting basic arithmetic operations.\n- Floats (`float`): Represent real numbers with decimals, can be rounded using round().\n- **Operators**: Include assignment (=), comparison (e.g., ==, !=, >, <), and logical (and, or, not) operators.\n- **Boolean Values**: Result from comparisons, with `True` and `False` as possible values.\n- **Type Coercion:** Converting between data types, like turning an int into a str with str() or a str into an int with int().\n\n\n## [In-class Coding #3]{style=\"color:#3e424b\"}{background-image=\"images/spider.png\" background-opacity=\"1\"}\n\n",
    "supporting": [
      "dia-3_files"
    ],
    "filters": [],
    "includes": {}
  }
}