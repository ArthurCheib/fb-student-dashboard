{
  "hash": "48797bcef53f60f1a1134aa1854c1fc1",
  "result": {
    "markdown": "---\ntitle: \"<span style='color:#FFC61A'> Introdução à Programação </span>\"\ntitle-slide-attributes: \n  data-background-image: images/matrix-class2.jpg\n  data-background-opacity: '0.75'\nsubtitle: \"<span style='color:#FFFFFF'> Aula 4 - Creating your own functions </span>\"\nhighlight-style: github\nformat:\n  revealjs:\n    incremental: true\n    footer: \"<span style='color:#66023C'> Faculdade Belavista </span>\"\n    progress: true\n    menu: true\n    theme: simple\n    code-line-numbers: true\n    embed-resources: true\n---\n\n# [My own Function! `def`]{style=\"color:#85bae5\"}\n\n- Quem criou a função `print`?\n- O que faz a função `print`?\n- E se existisse uma função `hello`?\n- Quais elementos seriam necessários?\n\n\n## How to write a `function`\n\n:::{.fragment}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-line-numbers=\"1,2,3|5\"}\n## Começando a escrever minha primeira função\ndef function_name(parâmetros):\n  \"\"\"docstring = o que a função faz\"\"\"\n\n## Um momento ...\n```\n:::\n\n\n:::\n\n:::{.fragment}\n- Antes de começar a escrever qualquer função, procuraremos obedecer a alguns princípios de criação!\n:::\n\n## Use `pseudocode`\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Descrição de alto nível de um algoritmo\n- Usamos linguagem natural (Português)\n- Não é algo executável em computador\n- Passo intermediário. Por quê?\n  - **Pense primeiro!**\n  - **Foco na lógica, não na sintaxe**\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"1,2|4,5\"}\n## Função que recebe um nome como 'input'\nhello(nome de alguém)\n\n## E possui como 'output' uma mensagem com o nome\nOla, nome de alguem!\n```\n:::\n\n\n:::\n\n## Princípio da Responsabilidade Única\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-line-numbers=\"1,2,3,4|6,7,8\"}\n## Começando a escrever minha primeira função\n\n# Essa função cumprimenta o nome inserido pelo usuário\nhello()\n\n## Como podemos quebrar essa função em partes menores?\n# Pergunte-se: que tarefas minhas função executa?\n# Ou - descreva o que sua função faz em voz alta\n```\n:::\n\n\n:::\n\n## Princípio da Modularização\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Quebre um problema grande em partes menores\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-line-numbers=\"1,2,3,4|6,7|9,10,11|13,14,16,17\"}\n## Começando a escrever minha primeira função\n\n# Essa função cumprimenta o nome inserido pelo usuário\nhello()\n\n  # First step\n  nome = get_name()\n  \n  # Second step\n  print_mensagem()\n```\n:::\n\n\n:::\n\n## Princípio da Modularização\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- Depois, trabalhe primeiro na construção das partes menores e as integre de volta ao todo ao finalizar.\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-line-numbers=\"1,2,3,4|6,7|9,10|12,13|15,16\"}\n## Começando a escrever minha primeira função\n\n# Essa função cumprimenta o nome inserido pelo usuário\nhello()\n\n  # First step\n  nome = get_name()\n  \n  # Second step\n  print_menssagem()\n\n# Função que pega o nome de um usuário\nget_name()\n\n# Função que printa uma mensagem especial ao usuario\nprint_message()\n```\n:::\n\n\n:::\n\n## Escrevendo uma `function`! {.scrollable}\n\n:::{.fragment}\n- Função que quero escrever:\n  - Função que tira a média entre dois números\n  - E que retorna ao usuário o resultado da média\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-line-numbers=\"1,2\"}\n## Step 1: nomeie a função\nget_average()\n```\n:::\n\n\n:::\n\n## Escrevendo uma `function`! {.scrollable}\n\n:::{.fragment}\n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-line-numbers=\"1,2\"}\n## Step 2: use o argumento 'def' para criação de funções\ndef get_average():\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code code-line-numbers=\"1,2|3\"}\n## Step 3: determine os parâmetros da função\n# No nosso caso, dois parâmetros apenas: primeiro e segundo numero\ndef get_average(numero1, numero2):\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-line-numbers=\"3,4|3|4\"}\n## Step 4: escreva o corpo (body) da função\ndef get_average(numero1, numero2):\n  soma = numero1 + numero2\n  media = soma / 2\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1,2,3,4|5\"}\n## Step 5: determine e escreva o que a função deve retornar (output)\ndef get_average(numero1, numero2):\n  soma = numero1 + numero2\n  media = soma / 2\n  return(media)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code code-line-numbers=\"1,2|4,5|7,8|10,11\"}\n## Step 6: explique sua função\ndef get_average(numero1, numero2):\n  \n  ## Obtendo a soma dos números inseridos\n  soma = numero1 + numero2\n  \n  ## Obtendo a média da soma\n  media = soma / 2\n  \n  ## Retornando o resultado da média para o usuário\n  return(media)\n```\n:::\n\n\n:::\n\n## Escrevendo uma `function`! {.scrollable}\n\n:::{.fragment}\n\n::: {.cell execution_count=12}\n``` {.python .cell-code code-line-numbers=\"1,2,4,5,7,8,10,11|13,14\"}\n## Step 7: faça testes com sua função\ndef get_average(numero1, numero2):\n  \n  ## Obtendo a soma dos números inseridos\n  soma = numero1 + numero2\n  \n  ## Obtendo a média da soma\n  media = soma / 2\n  \n  ## Retornando o resultado da média para o usuário\n  return(media)\n\n## Teste 1\nget_average(10, 20)\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 10px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n15.0\n```\n:::\n:::\n\n\n:::\n\n## [In-class Coding #4]{style=\"color:#3e424b\"}{background-image=\"images/spider.png\" background-opacity=\"1\"}\n\n",
    "supporting": [
      "dia-4_files"
    ],
    "filters": [],
    "includes": {}
  }
}