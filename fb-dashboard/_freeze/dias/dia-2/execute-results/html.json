{
  "hash": "9b7c8f0f7352ddff106621f9b7150ac6",
  "result": {
    "markdown": "---\ntitle: \"<span style='color:#FFC61A'> Introdução à Programação </span>\"\ntitle-slide-attributes: \n  data-background-image: images/matrix-class2.jpg\n  data-background-opacity: '0.75'\nsubtitle: \"<span style='color:#FFFFFF'> Aula 2 - Introduction to Python </span>\"\nhighlight-style: github\nformat:\n  revealjs:\n    incremental: true\n    footer: \"<span style='color:#66023C'> Faculdade Belavista </span>\"\n    progress: true\n    menu: true\n    theme: simple\n    code-line-numbers: true\n    embed-resources: true\n---\n\n# [Python]{style=\"color:#85bae5\"}\n\n## Sobre a linguagem {background-image=\"images/python-logo.png\" background-opacity=\"0.20\"}\n\n- Guido van Rossum - 1991\n- Sintaxe simples\n- High-level language\n- Gerenciamento Automático de Memória\n- Portabilidade\n- Comunidade\n- Data Science / Machine Learning\n\n# [Programando em Python]{style=\"color:#85bae5\"}\n\n## GUI - Graphical User Interface {background-image=\"images/gui.png\" background-opacity=\"0.20\"}\n\n- Interação com o software através de **elementos visuais**\n  - Botões & Ícones (etc.)\n- Uma Alternativa à CLI\n  - *Command Line Interface*\n- Objetivos\n  - Facilitar interação com usuário (mais intuitivo)\n  - Interface amigável\n\n## IDE - Integrated Development Environment {background-image=\"images/ide.png\" background-opacity=\"0.20\"}\n\n- Facilitador na interação/desenvolvimento de software\n- Plataforma abrangente (elementos visuais e de linguagem)\n- Objetivos:\n  - Integrar as ferramentas nececessárias à programação\n  - Facilitar o desenvolvimento de programas\n\n## []{background-image=\"images/spider.png\" background-opacity=\"1\"}\n\n# [Programando!]{style=\"color:#85bae5\"}\n\n## Meu primeiro código\n\n:::{.fragment}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-line-numbers=\"|1|3|5\"}\n# Isso é um comentário, não um código. Por quê?\n\n# R: Hashtags ('#') indicam ao interpretador algo não-código (= ignore)\n\n# Quase lá...\n```\n:::\n\n\n:::\n\n--\n\n:::{.fragment}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Abaixo nós temos nossa primeira linha de código!\nprint('Hello, World!')\n```\n:::\n\n\n:::\n\n--\n\n:::{.fragment}\nOutput:\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n:::\n\n## Criando um 'Programa' {.scrollable}\n\n- Em programação, programas são comandos escritos que especificam ações que o computador deve realizar:\n  - Cálculos ou modelos matemáticos\n  - Manipulação de Dados\n  - Criação de um softwares\n- Todo conjunto de código (linhas de código escrito), em qualquer linguagem, pode ser considerado um **programa**.\n- Nome técnico: código-fonte (*source code*)\n- Nossos programas serão desenvolvidos **em Python** (linguagem) e eles possuirão finalidades diversas.\n\n## Behind the scenes {background-image=\"images/machine-code.png\" background-opacity=\".10\"}\n\n1. Redigir o código fonte\n  - É o que entendemos por **programar** - escrever o código\n2. Rodar o código fonte (clicar em **Executar**)\n3. Interpretador lê o código fonte e traduz para linguagem de máquinas (código binário)\n4. Sistema Operacional (SO) recebe o código binário\n5. SO + Hardware Executam os comandos recebidos\n6. Computador gera o output esperado!\n\n\n# [Voltando ao nosso primeiro programa...]{style=\"color:#85bae5\"}\n\n<div style=\"margin-top: 30px;\"></div>\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Programa \nprint('Hello, World!')\n```\n:::\n\n\n## Decompondo o Programa {.scrollable}\n\n<div style=\"margin-top: 30px;\"></div>\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-line-numbers=\"1,2|1\"}\n# Programa \nprint('Hello, World!')\n```\n:::\n\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Primeiro elemento: função\nprint\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n### O que é uma função?\n\n1) Verbos/Comandos e Ações pré-construídos (built-int)\n2) Inputs, Comportamento e Outpus pré-estabelecidos\n3) Inputs > Behavior/Comportamento > Outputs\n4) Toda função possui: **documentação**\n:::\n\n\n:::{.fragment}\n### A função `print`\n\n1) Função que sabe como printar/publicar algo no console\n2) Como dizemos à essa função o que printar?\n:::\n\n---\n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-line-numbers=\"1,2|1\"}\n# Programa \nprint('Hello, World!')\n```\n:::\n\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Segundo elemento: parêntesis\n( )\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n### Parêntesis\n\n1) **Parâmetros** (parameters): containers (*placeholders*) para os valores que atribuiremos\n2) **Argumentos:** valores reais que atribuímos à uma função quando ela for chamada\n:::\n\n## {.scrollable}\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-line-numbers=\"1,2|1\"}\n# Programa \nprint('Hello, World!')\n```\n:::\n\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Terceiro elemento: o(s) argumento(s)\n'Hello, World'\n```\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n### Argumento\n\n- Nesse caso, passamos um texto como argumento\n- Como sabemos que isso é um texto?\n- Se encapsulado por aspas ('single', \"double\") = str\n- `str` (more later)\n:::\n\n\n# [Funções]{style=\"color:#85bae5\"}\n\n## Aprofundamento: Função {.scrollable}\n\n:::{.fragment}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n## Entendo mais sobre funções\nprint('Hello, World!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=12}\n``` {.python .cell-code code-line-numbers=\"1,2|4|1,2,4\"}\n## O que mudou aqui?\nprint('Hello', 'World')\n\n## Default Parameter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n## Positional argument\nprint('Hello', 'World', 'or', 'Hello', 'Brasil')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World or Hello Brasil\n```\n:::\n:::\n\n\n:::\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code code-line-numbers=\"|\"}\n## Keyword argument\nprint('Hello', 'World', 'or', 'Hello', 'Brasil', sep='-')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello-World-or-Hello-Brasil\n```\n:::\n:::\n\n\n:::\n\n## Argumentos\n\n- Argumentos podem ser:\n  - **Positional arguments:** associação posicional à parâmetros (argumentos que precisam ser passados para funação na ordem que os parâmetros estão definidos)\n  - **Keyword arguments:** associação explícita à parâmetros\n  - **Default parameter:** possui um argumento padrão que será utilizado caso não façamos opção explícita por desligá-lo ou utilizá-lo com outro argumento\n\n## Debugging (Depuração)\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n<div style=\"margin-top: 30px;\"></div>\n\n- Processo de identificar, rastrear e corrigir erros (\"bugs\")\n- Forma de mantermos nosso programa funcionando como previsto\n- Grande ajuda ao seu futuro eu\n- Identificar o Problema > Localizar > Corrigir\n\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=15}\n``` {.python .cell-code code-line-numbers=\"1|2\"}\n## O que está errado aqui?\nprint('Meu primeiro programa'\n```\n:::\n\n\n:::\n\n# [In-class Coding #1]{style=\"color:#3e424b\"}\n\n- Metodologia\n  - Espere... respire...\n  - Anote primeiro, antes de começar a programar\n    1. Qual deve ser o meu **output final**? Requisitos\n    2. Qual o meu **input**?\n    3. Qual a **transformação** necessária do meu input?\n\n## [In-class Coding #1]{style=\"color:#3e424b\"}{background-image=\"images/spider.png\" background-opacity=\"1\"}\n\n\n# [Variáveis]{style=\"color:#85bae5\"}\n\n## O que é uma variável?\n\n<div style=\"margin-top: 30px;\"></div>\n\n:::{.fragment}\n- É um container onde armazenamos coisas (dados)\n- Uma variável é sempre composta de dois elementos:\n  - Nome\n  - Conteúdo\n- Em Python: cria-se uma variável com o simbolo: `=` (igual)\n:::\n\n:::{.fragment}\n\n::: {.cell execution_count=16}\n``` {.python .cell-code code-line-numbers=\"1|2|3|4|5,6|7|8\"}\n## Minha primeira variável\nvariavel = 'Belavista'\nendereco = 'Avenida Cardeal Arcoverde'\nvar_sem_acento = 'Nomes de variáveis não gostam de acentos!'\n# Snake_case\nvar_sem_espaco = 'E nem de espaços em branco'\nvar_intuitiva = 'Que o nome da var diga algo sobre o conteúdo'\nmeu_numero = 2024\n```\n:::\n\n\n:::\n\n## [In-class Coding #2]{style=\"color:#3e424b\"}{background-image=\"images/spider.png\" background-opacity=\"1\"}\n\n",
    "supporting": [
      "dia-2_files"
    ],
    "filters": [],
    "includes": {}
  }
}