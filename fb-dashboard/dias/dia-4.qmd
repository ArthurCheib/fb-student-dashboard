---
title: "<span style='color:#FFC61A'> Introdução à Programação </span>"
title-slide-attributes: 
  data-background-image: images/matrix-class2.jpg
  data-background-opacity: '0.75'
subtitle: "<span style='color:#FFFFFF'> Aula 4 - Creating your own functions </span>"
highlight-style: github
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#66023C'> Faculdade Belavista </span>"
    progress: true
    menu: true
    theme: simple
    code-line-numbers: true
    embed-resources: true
---

# [My own Function! `def`]{style="color:#85bae5"}

- Quem criou a função `print`?
- O que faz a função `print`?
- E se existisse uma função `hello`?
- Quais elementos seriam necessários?


## How to write a `function`

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,3|5"
#| echo: true
#| eval: false

## Começando a escrever minha primeira função
def function_name(parâmetros):
  """docstring = o que a função faz"""

## Um momento ...
```
:::

:::{.fragment}
- Antes de começar a escrever qualquer função, procuraremos obedecer a alguns princípios de criação!
:::

## Use `pseudocode`

<div style="margin-top: 30px;"></div>

:::{.fragment}
- Descrição de alto nível de um algoritmo
- Usamos linguagem natural (Português)
- Não é algo executável em computador
- Passo intermediário. Por quê?
  - **Pense primeiro!**
  - **Foco na lógica, não na sintaxe**
:::

<div style="margin-top: 10px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "1,2|4,5"
#| echo: true
#| eval: false

## Função que recebe um nome como 'input'
hello(nome de alguém)

## E possui como 'output' uma mensagem com o nome
Ola, nome de alguem!
```
:::

## Princípio da Responsabilidade Única

<div style="margin-top: 30px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,3,4|6,7,8"
#| echo: true
#| eval: false

## Começando a escrever minha primeira função

# Essa função cumprimenta o nome inserido pelo usuário
hello()

## Como podemos quebrar essa função em partes menores?
# Pergunte-se: que tarefas minhas função executa?
# Ou - descreva o que sua função faz em voz alta
```
:::

## Princípio da Modularização

<div style="margin-top: 30px;"></div>

:::{.fragment}
- Quebre um problema grande em partes menores
:::

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,3,4|6,7|9,10,11|13,14,16,17"
#| echo: true
#| eval: false

## Começando a escrever minha primeira função

# Essa função cumprimenta o nome inserido pelo usuário
hello()

  # First step
  nome = get_name()
  
  # Second step
  print_mensagem()
```
:::

## Princípio da Modularização

<div style="margin-top: 30px;"></div>

:::{.fragment}
- Depois, trabalhe primeiro na construção das partes menores e as integre de volta ao todo ao finalizar.
:::

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,3,4|6,7|9,10|12,13|15,16"
#| echo: true
#| eval: false

## Começando a escrever minha primeira função

# Essa função cumprimenta o nome inserido pelo usuário
hello()

  # First step
  nome = get_name()
  
  # Second step
  print_menssagem()

# Função que pega o nome de um usuário
get_name()

# Função que printa uma mensagem especial ao usuario
print_message()
```
:::

## Escrevendo uma `function`! {.scrollable}

:::{.fragment}
- Função que quero escrever:
  - Função que tira a média entre dois números
  - E que retorna ao usuário o resultado da média
:::

:::{.fragment}
```{python}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

## Step 1: nomeie a função
get_average()
```
:::

## Escrevendo uma `function`! {.scrollable}

:::{.fragment}
```{python}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

## Step 2: use o argumento 'def' para criação de funções
def get_average():
```
:::

<div style="margin-top: 30px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "1,2|3"
#| echo: true
#| eval: false

## Step 3: determine os parâmetros da função
# No nosso caso, dois parâmetros apenas: primeiro e segundo numero
def get_average(numero1, numero2):
```
:::

<div style="margin-top: 30px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "3,4|3|4"
#| echo: true
#| eval: false

## Step 4: escreva o corpo (body) da função
def get_average(numero1, numero2):
  soma = numero1 + numero2
  media = soma / 2
```
:::

<div style="margin-top: 30px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,3,4|5"
#| echo: true
#| eval: false

## Step 5: determine e escreva o que a função deve retornar (output)
def get_average(numero1, numero2):
  soma = numero1 + numero2
  media = soma / 2
  return(media)
```
:::

<div style="margin-top: 30px;"></div>

:::{.fragment}
```{python}
#| code-line-numbers: "1,2|4,5|7,8|10,11"
#| echo: true
#| eval: false

## Step 6: explique sua função
def get_average(numero1, numero2):
  
  ## Obtendo a soma dos números inseridos
  soma = numero1 + numero2
  
  ## Obtendo a média da soma
  media = soma / 2
  
  ## Retornando o resultado da média para o usuário
  return(media)
```
:::

## Escrevendo uma `function`! {.scrollable}

:::{.fragment}
```{python}
#| code-line-numbers: "1,2,4,5,7,8,10,11|13,14"
#| echo: true
#| eval: false

## Step 7: faça testes com sua função
def get_average(numero1, numero2):
  
  ## Obtendo a soma dos números inseridos
  soma = numero1 + numero2
  
  ## Obtendo a média da soma
  media = soma / 2
  
  ## Retornando o resultado da média para o usuário
  return(media)

## Teste 1
get_average(10, 20)
```
:::

<div style="margin-top: 10px;"></div>

:::{.fragment}
```{python}
#| echo: false
#| eval: true

## Step 7: faça testes com sua função
def get_average(numero1, numero2):
  
  ## Obtendo a soma dos números inseridos
  soma = numero1 + numero2
  
  ## Obtendo a média da soma
  media = soma / 2
  
  ## Retornando o resultado da média para o usuário
  return(media)

## Teste 1
get_average(10, 20)
```
:::

## [In-class Coding #4]{style="color:#3e424b"}{background-image="images/spider.png" background-opacity="1"}
